{
	"info": {
		"_postman_id": "d5e9e5ca-7807-4a58-9f5a-028ac17bdd02",
		"name": "Home_Work3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var Resp = pm.response.json();\r",
							"pm.environment.set(\"auth_token\", Resp.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "home",
							"type": "text"
						},
						{
							"key": "password",
							"value": "work",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\"type\":\"object\",\r",
							"        \"properties\":{\"u_age\":{\"type\":\"integer\"},\r",
							"                        \"u_name\":{\"type\":\"array\",\r",
							"                        \"items\":[{\"type\":\"string\"},\r",
							"                        {\"type\":\"integer\"},\r",
							"                        {\"type\":\"integer\"}],\r",
							"                        },\r",
							"                        \"u_salary_1_5_year\":{\"type\":\"integer\"}\r",
							"\t\t\t\t\t\t},\r",
							"                        },\r",
							"        \"qa_salary_after_12_months\":{\"type\":\"number\"},\r",
							"        \"qa_salary_after_6_months\":{\"type\":\"integer\"},\r",
							"        \"start_qa_salary\":{\"type\":\"integer\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"var Resp = pm.response.json();\r",
							"console.log(\"req\", Resp.person.u_salary_1_5_year)\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(Resp, schema)).to.be.true;\r",
							"  })\r",
							"\r",
							"  // В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var Req = JSON.parse(request.data);\r",
							"console.log(Resp.person.u_salary_1_5_year)\r",
							"console.log(\"Req.salary\", Req.salary)\r",
							"pm.test(\"Salary1_5\", function(){\r",
							"    pm.expect(Resp.person.u_salary_1_5_year).to.eql(Req.salary*4);\r",
							"})\r",
							"pm.test(\"Salary6\", function(){\r",
							"    pm.expect(Resp.qa_salary_after_6_months).to.eql(Req.salary*2);\r",
							"})\r",
							"console.log(Resp.qa_salary_after_12_months)\r",
							"pm.test(\"Salary12\", function(){\r",
							"    pm.expect(Resp.qa_salary_after_12_months).to.eql(Req.salary*2.9);\r",
							"})\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"console.log(\"salary1_5\", Resp.person.u_salary_1_5_year)\r",
							"pm.environment.set(\"Salary1_5\", Resp.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 50,\r\n    \"salary\": 1000,\r\n    \"name\": \"Tom\",\r\n    \"auth_token\" : \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"var schema = {   \r",
							"  \"type\": \"object\",\r",
							"    \"properties\": {\"age\": \r",
							"\t      {\"type\": \"integer\"},\r",
							"                  \"name\": \r",
							"          {\"type\": \"string\"},\r",
							"        \"salary\": {\r",
							"                    \"type\": \"array\",\r",
							"                        \"items\": [{\"type\": \"integer\"},\r",
							"                                  {\"type\": \"string\"},\r",
							"\t\t\t\t\t              {\"type\":\"string\"}]\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"var Resp = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(Resp, schema)).to.be.true;\r",
							"  })\r",
							"\r",
							"  //В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var Req = request.data;\r",
							"console.log (\"resp.salary\", Resp.salary[1]);\r",
							"console.log(\"req salary\", Req.salary*2)\r",
							"\r",
							"pm.test(\"Salary2\", function(){\r",
							"pm.expect(+Resp.salary[1]).to.eql(Req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary3\", function(){\r",
							"pm.expect(+Resp.salary[2]).to.eql(Req.salary*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Massiv\", function(){\r",
							"    pm.expect(+Resp.salary[2]).to.be.above(+Resp.salary[1], Resp.salary[0])\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tom",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    }\r",
							"    }\r",
							"\r",
							"var Resp = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(Resp, schema)).to.be.true;\r",
							"  })\r",
							"\r",
							"  // 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"  var Req = request.data;\r",
							"pm.test(\"daily_food\", function(){\r",
							"pm.expect(Resp.daily_food).to.eql(Req.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep\", function(){\r",
							"pm.expect(Resp.daily_sleep).to.eql(Req.weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "90",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tom",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema= {\"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"age\": {\"type\": \"string\"},\r",
							"        \"family\": {\"type\": \"object\",\r",
							"                          \"properties\": {\r",
							"                \"children\": {\"type\": \"array\",\r",
							"                             \"items\": {\r",
							"                             \"anyOf\": [\r",
							"                            {\"type\": \"array\",\r",
							"                                \"items\": {\r",
							"                                 \"anyOf\": [\r",
							"                                        {\"type\": \"string\"},\r",
							"                                        {\"type\": \"integer\"}\r",
							"                                          ]\r",
							"                                         }\r",
							"                            },\r",
							"                            {\"type\": \"array\",\r",
							"                                \"items\": {\r",
							"                                \"anyOf\": [\r",
							"                                        {\"type\": \"string\"},\r",
							"                                        {\"type\": \"integer\"}\r",
							"                                         ]\r",
							"                                         }\r",
							"                            }\r",
							"                            ]\r",
							"                    }\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"            },\r",
							"                \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"integer\"}\r",
							"    }\r",
							"   }\r",
							"  }\r",
							"\r",
							"  var Resp = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(Resp, schema)).to.be.true;\r",
							"  })\r",
							"\r",
							"  // 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"  var Req = request.data;\r",
							"\r",
							"  pm.test(\"Name eql\", function(){\r",
							"      pm.expect(Resp.name).to.eql(pm.environment.get(\"name\"))\r",
							"  })\r",
							"\r",
							"  // 4) Провери му в запросе значению поля age (сравнить , что значение age из респонса , равен значению из реквеста)\r",
							"\r",
							"  pm.test(\"age eql\", function(){\r",
							"      pm.expect(Resp.age).to.eql(Req.age)\r",
							"  })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Salary1_5}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tom",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"var n = jsonData.length;\r",
							"\r",
							"function getrandomInt(n){\r",
							"    return Math.floor(Math.random()*n)\r",
							"};\r",
							"\r",
							"console.log(\"getrandomInt\", getrandomInt(n))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}