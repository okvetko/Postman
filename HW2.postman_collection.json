{
	"info": {
		"_postman_id": "e42b7192-8301-4114-8c6f-3d45190537a4",
		"name": "Home_Work2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"first\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//3.Спарсить response body в json.\r",
							"\r",
							"var jsonResp = pm.response.json();\r",
							"\r",
							"//4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonResp.name).to.eql(\"Tom\")\r",
							"});\r",
							"\r",
							"//5.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"age\", function (){\r",
							"    pm.expect(jsonResp. age).to.eql(\"55\")\r",
							"});\r",
							"\r",
							"//6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"salary\", function (){\r",
							"    pm.expect(jsonResp. salary).to.eql(1000)\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"var jsonReq = request.data;\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"EqualName\", function(){ \r",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);\r",
							"})\r",
							"    \r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"EqualAge\", function(){\r",
							"    pm.expect(jsonResp.age).to.eql(jsonReq.age);\r",
							"})\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"EqualSalary\", function(){\r",
							"        pm.expect(jsonResp.salary).to.eql(+jsonReq.salary);\r",
							"})\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"var family = jsonResp.family;\r",
							"console.log(\"family = \" , family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)  ]\r",
							"\r",
							"pm.test(\"EqualSalary\", function(){\r",
							"        pm.expect(jsonResp.family.u_salary_1_5_year).to.eql(jsonReq.salary*4);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tom",
							"type": "text"
						},
						{
							"key": "age",
							"value": "55",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request);\r",
							"console.log(\"222\",pm.request.url);\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var Resp = pm.response.json (); \r",
							"\r",
							"// 4. Спарсить request.\r",
							"var Req = pm.request.url.query.toObject ();\r",
							"\r",
							"// 05. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\" , function(){\r",
							"    pm.expect(Resp.name).to.eql(Req.name);\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\" , function(){\r",
							"    pm.expect(Resp.age).to.eql(Req.age);\r",
							"})\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary\" , function(){\r",
							"    pm.expect(Resp.salary).to.eql(+Req.salary);\r",
							"})\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response\r",
							"var family = Resp.family;\r",
							"console.log(\"family = \" , family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"var doggy = Resp.family.pets.dog;\r",
							"pm.test(\"Dog have name\" , function(){\r",
							"        pm.expect(doggy).to.have.any.keys('name')\r",
							"    });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"var dogage = Resp.family.pets.dog;\r",
							"pm.test(\"Dog have age\", function(){\r",
							"    pm.expect(dogage).to.have.any.keys(\"age\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"var luky = Resp.family.pets.dog.name;\r",
							"pm.test(\"Dog have Luky\", function(){\r",
							"    pm.expect(luky).to.include(\"Luky\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"var dog = Resp.family.pets.dog.age;\r",
							"pm.test(\"Dog is 4 years\", function(){\r",
							"    pm.expect(dog).to.eql(4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Tom&age=55&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tom"
						},
						{
							"key": "age",
							"value": "55"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"var Resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var Req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function(){\r",
							"    pm.expect(Resp.name).to.eql(Req.name);\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age\", function(){\r",
							"    pm.expect(Resp.age).to.eql(+Req.age);\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary = \" +Req.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary = \" + Resp.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary = \" + Resp.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary = \" + Resp.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary = \" + Resp.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary0\", function(){\r",
							"    pm.expect(Resp.salary[0]).to.eql(+Req.salary);\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary1\", function(){\r",
							"    pm.expect(+Resp.salary[1]).to.eql(Req.salary*2);\r",
							"})\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary2\", function(){\r",
							"    pm.expect(+Resp.salary[2]).to.eql(Req.salary*3);\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", Req.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", Req.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", Req.salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var salary = Resp.salary;\r",
							"\r",
							"for (var i=0; i < salary.length; i++){\r",
							"    console.log(\"Salary_\" + i + \" : \" + salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Tom&age=55&salary=100",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tom"
						},
						{
							"key": "age",
							"value": "55"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"var Resp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var Req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start_qa_salary\", function () {\r",
							"    pm.expect(Resp).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(Resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(Resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(Resp).to.have.any.keys(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(Resp).to.have.any.keys(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(Resp).to.have.any.keys(\"person\");\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"console.log(\"resp\", Resp.start_qa_salary)\r",
							"console.log(\"req\", Req.salary)\r",
							"\r",
							"pm.test(\"Salary=start_qa_salary\", function () {\r",
							"    pm.expect(Resp.start_qa_salary).to.eql(+Req.salary);\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"console.log(\"resp6\", Resp.qa_salary_after_6_months)\r",
							"console.log(\"req\", Req.salary)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(Resp.qa_salary_after_6_months).to.eql(Req.salary * 2);\r",
							"})\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"console.log(\"resp12\", Resp.qa_salary_after_12_months)\r",
							"console.log(\"req\", Req.salary)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(Resp.qa_salary_after_12_months).to.eql(Req.salary * 2.7);\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(Resp[\"qa_salary_after_1.5_year\"]).to.eql(Req.salary * 3.3);\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(Resp[\"qa_salary_after_3.5_years\"]).to.eql(Req.salary * 3.8);\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name=salary\", function () {\r",
							"    pm.expect(Resp.person.u_name[1]).to.eql(+Req.salary);\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age=age\", function () {\r",
							"    pm.expect(Resp.person.u_age).to.eql(+Req.age);\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salaru_5=4.2salary\", function () {\r",
							"    pm.expect(Resp.person.u_salary_5_years).to.eql(Req.salary * 4.2);\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person = Resp.person;\r",
							"var name = Resp.person.u_name;\r",
							"for (var prop in person;  \r",
							"for (i=0; i < name.length; i++){\r",
							"    console.log(\"u_name_\" + i + \":\" + name[i])\r",
							"){\r",
							"console.log(\"Person_\" + prop+ \"=\" + person[prop]);\r",
							"}\r",
							"\r",
							"for (i=0; i < name.length; i++){\r",
							"    console.log(\"u_name_\" + i + \":\" + name[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}